Notes:
This is a recursive descent parser.
Expressions produce valuesm steatments don't.
The AST consists of Nodes that are connectet wich other. Some nodes implments ISteament and som IExpression.

AST:
<steatment> := let | return

let <identifer> = <expression>;
return <expression>;
<prefix operator><expression>;

<expressions>
invoving prefix: 
	-5 
	!true 
	!false
binary operators: 
	5 + 5 
	5 - 5
	5 / 5
	5 * 5
comparison operators:
	foo == bar 
	foo != bar 
	foo < bar 
	foo > bar
parenthesis group expressions:
	5 * (5 + 5) 
	((5 + 5) * 5) * 5
call expressions:
	add(2,3)
	add(add(2, 3), add(5, 10)) 
	max(5, add(5, (5 * 5)))
identifiers expressions:
	foo * bar / foobar 
	add(foo, bar)
funtions literals:
	(We can use a let statement to bind a function to a name.)
	let add = fn(x, y) { return x + y };

	(here we use a function literal in place of an identifier:)
	fn(x, y) { return x + y }(5, 5)
	(fn(x) { return x }(5) + 10 ) * 10
if expressions:
	let result = if (10 > 5) { true } else { false };


Terminology:
prefix operator:	 an operator “in front of” its operand. (ex: --5)
postfix operator:	 an operator “after” its operand. (ex: i++)[Our language doesn't have this kind of operator.]
infix operators:	 appear in binary expressions - where the operator has two operands. (ex: a * b, * is infix)
precedence:			 witch which priority do different operators have. (ex: 5 + 5 * 10, 5 * 10 has the higest precedence)





